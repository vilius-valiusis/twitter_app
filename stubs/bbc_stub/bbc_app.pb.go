// Code generated by protoc-gen-go.
// source: bbc_app.proto
// DO NOT EDIT!

/*
Package bbcapp is a generated protocol buffer package.

It is generated from these files:
	bbc_app.proto

It has these top-level messages:
	NewsRequest
	NewsResponse
*/
package bbcapp

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// The request message containing the user's name.
type NewsRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *NewsRequest) Reset()         { *m = NewsRequest{} }
func (m *NewsRequest) String() string { return proto.CompactTextString(m) }
func (*NewsRequest) ProtoMessage()    {}

// The response message containing the greetings
type NewsResponse struct {
	NewsText string `protobuf:"bytes,1,opt,name=news_text" json:"news_text,omitempty"`
}

func (m *NewsResponse) Reset()         { *m = NewsResponse{} }
func (m *NewsResponse) String() string { return proto.CompactTextString(m) }
func (*NewsResponse) ProtoMessage()    {}

func init() {
}

// Client API for NewsService service

type NewsServiceClient interface {
	// Sends a greeting
	GetNews(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (NewsService_GetNewsClient, error)
}

type newsServiceClient struct {
	cc *grpc.ClientConn
}

func NewNewsServiceClient(cc *grpc.ClientConn) NewsServiceClient {
	return &newsServiceClient{cc}
}

func (c *newsServiceClient) GetNews(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (NewsService_GetNewsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NewsService_serviceDesc.Streams[0], c.cc, "/bbcapp.NewsService/getNews", opts...)
	if err != nil {
		return nil, err
	}
	x := &newsServiceGetNewsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewsService_GetNewsClient interface {
	Recv() (*NewsResponse, error)
	grpc.ClientStream
}

type newsServiceGetNewsClient struct {
	grpc.ClientStream
}

func (x *newsServiceGetNewsClient) Recv() (*NewsResponse, error) {
	m := new(NewsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NewsService service

type NewsServiceServer interface {
	// Sends a greeting
	GetNews(*NewsRequest, NewsService_GetNewsServer) error
}

func RegisterNewsServiceServer(s *grpc.Server, srv NewsServiceServer) {
	s.RegisterService(&_NewsService_serviceDesc, srv)
}

func _NewsService_GetNews_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewsServiceServer).GetNews(m, &newsServiceGetNewsServer{stream})
}

type NewsService_GetNewsServer interface {
	Send(*NewsResponse) error
	grpc.ServerStream
}

type newsServiceGetNewsServer struct {
	grpc.ServerStream
}

func (x *newsServiceGetNewsServer) Send(m *NewsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NewsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bbcapp.NewsService",
	HandlerType: (*NewsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getNews",
			Handler:       _NewsService_GetNews_Handler,
			ServerStreams: true,
		},
	},
}
