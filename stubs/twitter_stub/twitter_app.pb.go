// Code generated by protoc-gen-go.
// source: twitter_app.proto
// DO NOT EDIT!

/*
Package twitterapp is a generated protocol buffer package.

It is generated from these files:
	twitter_app.proto

It has these top-level messages:
	TweetRequest
	TweetResponse
*/
package twitterapp

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// The request message containing the user's name.
type TweetRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TweetRequest) Reset()         { *m = TweetRequest{} }
func (m *TweetRequest) String() string { return proto.CompactTextString(m) }
func (*TweetRequest) ProtoMessage()    {}

// The response message containing the greetings
type TweetResponse struct {
	TweetText string `protobuf:"bytes,1,opt,name=tweet_text" json:"tweet_text,omitempty"`
}

func (m *TweetResponse) Reset()         { *m = TweetResponse{} }
func (m *TweetResponse) String() string { return proto.CompactTextString(m) }
func (*TweetResponse) ProtoMessage()    {}

func init() {
}

// Client API for TwitterService service

type TwitterServiceClient interface {
	// Sends a greeting
	GetTweets(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (TwitterService_GetTweetsClient, error)
}

type twitterServiceClient struct {
	cc *grpc.ClientConn
}

func NewTwitterServiceClient(cc *grpc.ClientConn) TwitterServiceClient {
	return &twitterServiceClient{cc}
}

func (c *twitterServiceClient) GetTweets(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (TwitterService_GetTweetsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TwitterService_serviceDesc.Streams[0], c.cc, "/twitterapp.TwitterService/getTweets", opts...)
	if err != nil {
		return nil, err
	}
	x := &twitterServiceGetTweetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TwitterService_GetTweetsClient interface {
	Recv() (*TweetResponse, error)
	grpc.ClientStream
}

type twitterServiceGetTweetsClient struct {
	grpc.ClientStream
}

func (x *twitterServiceGetTweetsClient) Recv() (*TweetResponse, error) {
	m := new(TweetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TwitterService service

type TwitterServiceServer interface {
	// Sends a greeting
	GetTweets(*TweetRequest, TwitterService_GetTweetsServer) error
}

func RegisterTwitterServiceServer(s *grpc.Server, srv TwitterServiceServer) {
	s.RegisterService(&_TwitterService_serviceDesc, srv)
}

func _TwitterService_GetTweets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TweetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwitterServiceServer).GetTweets(m, &twitterServiceGetTweetsServer{stream})
}

type TwitterService_GetTweetsServer interface {
	Send(*TweetResponse) error
	grpc.ServerStream
}

type twitterServiceGetTweetsServer struct {
	grpc.ServerStream
}

func (x *twitterServiceGetTweetsServer) Send(m *TweetResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TwitterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twitterapp.TwitterService",
	HandlerType: (*TwitterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getTweets",
			Handler:       _TwitterService_GetTweets_Handler,
			ServerStreams: true,
		},
	},
}
